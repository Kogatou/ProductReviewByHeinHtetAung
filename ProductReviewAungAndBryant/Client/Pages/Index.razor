@page "/"

<PageTitle>Product Review</PageTitle>
@* @using Microsoft.AspNetCore.Authorization *@
@* @inject AuthenticationStateProvider AuthenticationStateProvider *@
@inject NavigationManager NavigationManager
@using PcPartModel = ProductReviewAungAndBryant.Shared.Domain
@inject HttpInterceptorService _interceptor
@implements IDisposable
@inject HttpClient _client
@using ProductReviewAungAndBryant.Client.Static

<div class="grid-container">

    <a href="/counter"></a>
    @foreach (var pcpart in pcparts)
    {
        <div class="item">
            <div class="content">@pcpart.PcPartName</div>
            <div class="content">@pcpart.PcPartPrice</div>

            @if (pcpart.PcPartImages != null &&
           pcpart.PcPartImages.Count > 0)
            {
                <img src="data:image/png;base64,@pcpart.PcPartImages[0].base64data" alt="Photo" width="100" height="100" />
            }
            else
            {
                <p>No photo available.</p>
            }

        </div>
    }
</div>
<style>

    .grid-container {
        display: grid;
        grid-template-columns: repeat(auto-fit,minmax(3, 1fr));
        padding: 10px;
    }

    .item {
        position: relative;
        background: #D9D9D9;
        border-radius: 7.36px;
        border: 0.74px black solid;
        display: flex;
        align-items: center;
        padding: 10px;
    }

    .image {
        width: 40%;
        height: auto;
        border-radius: 7.36px;
        border: 0.74px black solid;
        margin-right: 10px;
    }

    .content {
        flex: 1;
        text-align: left;
        color: black;
        font-size: 14px;
        font-family: Inter;
        font-style: italic;
        font-weight: 900;
        word-wrap: break-word;
    }
</style>

@code
{
    private List<PcPartModel.PcPart> pcparts = new List<PcPartModel.PcPart>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _interceptor.MonitorEvent();
            pcparts = await _client.GetFromJsonAsync<List<PcPartModel.PcPart>>($"{Endpoints.PcPartsEndpoint}/GetPcParts");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception e)
        {
        }
    }

    public void Dispose()
    {
        _interceptor.DisposeEvent();
    }
    }
