@page "/pcparts/edit/{id:int}"

@using PcPartModel = ProductReviewAungAndBryant.Shared.Domain
@using ProductReviewAungAndBryant.Client.Static

@inject NavigationManager _navManager
@inject HttpClient _client
@inject HttpInterceptorService _interceptor
@implements IDisposable
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@attribute [Authorize]

<h3>Edit PcPart</h3>

<EditForm Model="pcpartModel" OnValidSubmit="@Edit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label>PcPart Name: </label>
        <div>
            <InputText @bind-Value="pcpartModel.PcPartName" class="form-control" />
            <ValidationMessage For="@(() => pcpartModel.PcPartName)" />
        </div>
    </div>
    <div class="form-group mt-3">
        <label>PcPartPrice: </label>
        <div>
            <InputNumber @bind-Value="pcpartModel.PcPartPrice" class="form-control" />
            <ValidationMessage For="@(() => pcpartModel.PcPartPrice)" />
        </div>
    </div>

    <button type="submit" class="btn btn-success mt-3">
        @ButtonText
    </button>
</EditForm>

@code {

    [Parameter]
    public int id { get; set; }

    private PcPartModel.PcPart pcpartModel = new PcPartModel.PcPart();
    public string ButtonText { get; set; } = "Update PcPart";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _interceptor.MonitorEvent();
            pcpartModel = await _client.GetFromJsonAsync<PcPartModel.PcPart>($"{Endpoints.PcPartsEndpoint}/GetPcPart/{id}");
        }

        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception e)
        {
        }
    }

    async Task Edit()
    {      
        pcpartModel.UpdatedBy = "Admin";
        await _client.PutAsJsonAsync($"{Endpoints.PcPartsEndpoint}/PutPcPart/{id}", pcpartModel);
        _navManager.NavigateTo("/pcparts/");
    }

    public void Dispose()
    {
        _interceptor.DisposeEvent();
    }
}
