@page "/pcparts/create"

@using Model = ProductReviewAungAndBryant.Shared.Domain
@using ProductReviewAungAndBryant.Client.Static
@inject NavigationManager _navManager
@inject HttpClient _client
@inject HttpInterceptorService _interceptor
@implements IDisposable
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@attribute [Authorize]

<h3>Add PcPart</h3>

<EditForm Model="pcpart" OnValidSubmit="@Save">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label>PcPart Name: </label>
        <div>
            <InputText @bind-Value="pcpart.PcPartName" class="form-control" />
            <ValidationMessage For="@(() => pcpart.PcPartName)" />
        </div>
    </div>
    <div class="form-group mt-3">
        <label>PcPartPrice: </label>
        <div>
            <InputNumber @bind-Value="pcpart.PcPartPrice" class="form-control" />
            <ValidationMessage For="@(() => pcpart.PcPartPrice)" />
        </div>
    </div>

    <div class="input-group">
        <div class="custom-file">
            <InputFile class="custom-file-input" multiple OnChange="OnChange" accept="image/png, image/jpeg, image/gif" id="inputFile" />
            <label class="custom-file-label" for="inputFile">Choose file</label>
        </div>
    </div>

    <button type="submit" class="btn btn-success mt-3">
        @ButtonText
    </button>
</EditForm>

@code {
    private Model.PcPart pcpart = new Model.PcPart();
    public string ButtonText { get; set; } = "Save PcPart";


    List<Model.PcPartImage> pcPartImages = new List<Model.PcPartImage>();
    string message = "InputFile";

    protected override async Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
    }

    async Task Save()
    {
        pcpart.CreatedBy = "System";
        pcpart.PcPartImages = pcPartImages;
        await _client.PostAsJsonAsync($"{Endpoints.PcPartsEndpoint}/PostPcPart", pcpart);
        _navManager.NavigateTo("/pcparts/");
    }

    async Task OnChange(InputFileChangeEventArgs e)
    {
        var files = e.GetMultipleFiles(); // get the files selected by the users
        foreach (var file in files)
        {
            var resizedFile = await file.RequestImageFileAsync(file.ContentType, 640, 480); // resize the image file
            var buf = new byte[resizedFile.Size]; // allocate a buffer to fill with the file's data
            using (var stream = resizedFile.OpenReadStream())
            {
                await stream.ReadAsync(buf); // copy the stream to the buffer
            }

            pcPartImages.Add(
                new Model.PcPartImage
                    {
                        base64data = Convert.ToBase64String(buf),
                        contentType = file.ContentType,
                        fileName =
                        file.Name,
                        CreatedBy = "Admin"
                    }); // convert to a base64 string!!
        }
        message = "Click UPLOAD to continue";
    }

    public void Dispose()
    {
        _interceptor.DisposeEvent();
    }
}
